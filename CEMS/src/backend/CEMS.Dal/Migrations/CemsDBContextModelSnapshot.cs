// <auto-generated />
using System;
using CEMS.Dal.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CEMS.Dal.Migrations
{
    [DbContext(typeof(CemsDBContext))]
    partial class CemsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CEMS.Dal.Models.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedback");

                    b.Property<Guid>("TalkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("talk_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<int>("Vote")
                        .HasColumnType("int")
                        .HasColumnName("vote");

                    b.HasKey("Id");

                    b.HasIndex("TalkId");

                    b.HasIndex("UserId");

                    b.ToTable("attendee");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("background");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("Id");

                    b.ToTable("conference");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Moderator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("conference_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("UserId");

                    b.ToTable("moderator");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("Id");

                    b.ToTable("permission");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("CEMS.Dal.Models.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_permission");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("conference_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("location");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("session");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("TalkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("talk_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TalkId");

                    b.HasIndex("UserId");

                    b.ToTable("speaker");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Talk", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Presentation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("presentation");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("datetime")
                        .HasColumnName("scheduled_time");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("session_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("talk");
                });

            modelBuilder.Entity("CEMS.Dal.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("CEMS.Dal.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Attendee", b =>
                {
                    b.HasOne("CEMS.Dal.Models.Talk", "Talk")
                        .WithMany("Attendees")
                        .HasForeignKey("TalkId")
                        .IsRequired()
                        .HasConstraintName("FK_attendee_talk");

                    b.HasOne("CEMS.Dal.Models.User", "User")
                        .WithMany("Attendees")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_attendee_user");

                    b.Navigation("Talk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Moderator", b =>
                {
                    b.HasOne("CEMS.Dal.Models.Conference", "Conference")
                        .WithMany("Moderators")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK_moderator_conference");

                    b.HasOne("CEMS.Dal.Models.User", "User")
                        .WithMany("Moderators")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_moderator_user");

                    b.Navigation("Conference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CEMS.Dal.Models.RolePermission", b =>
                {
                    b.HasOne("CEMS.Dal.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_permission_role_permission");

                    b.HasOne("CEMS.Dal.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_role_role_permission");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Session", b =>
                {
                    b.HasOne("CEMS.Dal.Models.Conference", "Conference")
                        .WithMany("Sessions")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK_session_conference");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Speaker", b =>
                {
                    b.HasOne("CEMS.Dal.Models.Talk", "Talk")
                        .WithMany("Speakers")
                        .HasForeignKey("TalkId")
                        .IsRequired()
                        .HasConstraintName("FK_speaker_talk");

                    b.HasOne("CEMS.Dal.Models.User", "User")
                        .WithMany("Speakers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_speaker_user");

                    b.Navigation("Talk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Talk", b =>
                {
                    b.HasOne("CEMS.Dal.Models.Session", "Session")
                        .WithMany("Talks")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_talk_session");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("CEMS.Dal.Models.UserRole", b =>
                {
                    b.HasOne("CEMS.Dal.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_role_user_role");

                    b.HasOne("CEMS.Dal.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_user_role");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Conference", b =>
                {
                    b.Navigation("Moderators");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Session", b =>
                {
                    b.Navigation("Talks");
                });

            modelBuilder.Entity("CEMS.Dal.Models.Talk", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Speakers");
                });

            modelBuilder.Entity("CEMS.Dal.Models.User", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Moderators");

                    b.Navigation("Speakers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
